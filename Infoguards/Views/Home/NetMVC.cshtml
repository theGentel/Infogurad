
@{
    ViewBag.Title = "NetMVC";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<br />
<br />
<br />
<br />
<br />
<div class="container">
    <div class="body-content">
        <h1>What is ASP.NET MVC?</h1>
        <div>
            <p>
                ASP.NET MVC is an open source web development framework from Microsoft that provides a Model View Controller architecture. ASP.net MVC offers an alternative to ASP.net web forms for building web applications. It is a part of the .Net platform for building, deploying and running web apps. You can develop web apps and website with the help of HTML, CSS, jQuery, Javascript, etc.
                <br />
                Learn MVC with this ASP.NET MVC tutorial which covers all the basic concepts of MVC for beginners:

            </p>
            <ul>
                <li><a>Why ASP.net MVC?</a></li>
                <li><a>Version History of MVC</a></li>
                <li><a>Features of MVC</a></li>
                <li><a>Things to remember while creating MVC Application</a></li>
                <li><a>MVC Architectural Pattern</a></li>
                <li><a>Web Forms vs. MVC</a></li>
                <li><a>Advantages of ASP.NET MVC</a></li>
                <li><a>Best practices while using ASP.Net MVC</a></li>
            </ul>
        </div>


        <div>

            <h1>Why ASP.net MVC?</h1>
            <div>
                <p>
                    Although web forms were very successful, Microsoft thought of developing ASP.net MVC. The main issue with ASP.net webForms is performance.
                    <br />
                    In a web application, there are four main aspects which define performance:-
                    <ul>
                        <li>Response time issues</li>
                        <li>Problem of Unit Testing</li>
                        <li>HTML customization</li>
                        <li>Reusability of the code-behind class</li>
                    </ul>
                    ASP.net MVC excels on the above parameters.
                    <br />
                </p>
            </div>


            <div>
                <h1>Version History of MVC</h1>
                <div>
                    <p>
                        <h2> ASP.NET MVC1</h2>
                        <ul>
                            <li>Released on Mar 13, 2009</li>
                            <li>It runs on.NET 3.5</li>
                            <li>Visual Studio 2008</li>
                            <li>MVC Pattern architecture with WebForm Engine</li>
                            <li>Main Features includes Html & Unit testing, Ajax Helpers, Routing, etc.</li>
                        </ul>
                    </p>
                </div>


                <div>
                    <p>
                        <h2> ASP.NET MVC2</h2>
                        <ul>
                            <li>This version released on March 10, 2010</li>
                            <li>Runs on .NET 3.5,4.0 and with Microsoft Visual Studio 2008</li>
                            <li>Include Feature like Templated helpers, Ul helpers with automatic scaffolding & customizable templates</li>
                            <li>It supports for DataAnnotations Attributes to apply model validation on client and server sides</li>
                        </ul>
                    </p>
                </div>

                <div>
                    <p>
                        <h2> ASP.NET MVC3</h2>
                        <ul>
                            <li>It was released on Jan 13, 2011</li>
                            <li>Runs on .NET 4.0 and with Microsoft Visual Studio 2010</li>
                            <li>Use of NuGet to deliver software and allows you to manage dependencies across the platform</li>
                            <li>Better JavaScript support with, jQuery Validation, and JSON binding</li>
                            <li>It offers features like the Razor view engine; enhanced Data Annotations attributes for model validation on both client and server sides</li>
                        </ul>
                    </p>
                </div>


                <div>
                    <p>
                        <h2> ASP.NET MVC4</h2>
                        <ul>
                            <li>This version was released on Aug 2012</li>
                            <li>It runs on .NET 4.0, 4.5 and with Visual Studio 2010 & Visual Studio 2012</li>
                            <li>Enhancements to default project templates</li>
                            <li>Offers features like Mobile project template using jQuery Mobile, Task support for Asynchronous Controllers, bundling, minification, etc.</li>
                        </ul>
                    </p>
                </div>


                <div>
                    <p>
                        <h2> ASP.NET MVC5</h2>
                        <ul>
                            <li>Released on 17 October 2013</li>
                            <li>Runs on .NET 4.5, 4.5.1 and with Visual Studio 2012 & Visual OneASP.NET</li>
                            <li>Supports attribute routing in MVC</li>
                        </ul>
                    </p>
                </div>
            </div>


            <div>
                <h1>Features of MVC</h1>
                <div>
                    <ul>
                        <li>Easy and frictionless testability</li>
                        <li>Full control over your HTML, JavaScript , and URLs</li>
                        <li>Leverage existing ASP.Net Features</li>
                        <li>A new presentation option for ASP.Net</li>
                        <li>A simpler way to program Asp.Net</li>
                        <li>Clear separation of logic: Model, View, Controller</li>
                        <li>Test-Driven Development</li>
                        <li>Support for parallel development</li>
                    </ul>
                </div>
            </div>


            <div>
                <h1>Things to remember while creating MVC Application</h1>
                <div>
                    <p>
                        Here are a few useful things in this ASP.NET MVC tutorial which you need to remember for creating MVC application:
                    </p>
                    <div>
                        <ul>
                            <li>You need to remember that ASP .net MVC is NOT a replacement of ASP.Net web forms based applications</li>
                            <li>The approach of MVC app development must be decided based on the application requirements and features provided by ASP .net MVC to suit the specific development needs.</li>
                            <li>Application development process with ASP .NET MVC is more complex compared with web forms based applications.</li>
                            <li>Application maintainability always be higher with separation of application tasks.</li>
                        </ul>
                    </div>
                </div>
            </div>



            <div class="mb-lg-5">
                <h1>MVC architectural Pattern</h1>
                <div>
                    <p>

                        Keep in mind that HTTP is a “stateless” protocol, which means that each command runs independent of any other command.
                        In the original spec, HTTP requests each created and closed a TCP connection. In newer versions of the HTTP protocol
                        (HTTP 1.1 and above), persistent connection allows for multiple HTTP requests to pass over a persistent TCP connection,
                        improving resource consumption. In the context of DoS or DDoS attacks, HTTP requests in large quantities can be
                        used to mount an attack on a target device, and are considered part of application layer attacks or layer 7 attacks.
                    </p>
                </div>
                <div>
                    <img src="~/Content/MyContent/images/mvc.jpg" />
                </div>
                <div>
                    <p>
                        <text class="text-center">MVC architectural Pattern</text>
                        <br />
                        MVC is a software architecture pattern which follows the separation of concerns method. In this model .Net applications are divided into three interconnected parts which are called Model, View, and Controller.
                        <br />
                        The goal of the MVC pattern is that each of these parts can be developed, tested in relative isolation and also combined to create a very robust application.
                        <br />
                        Let see all of them in detail:
                    </p>
                </div>
            </div>

            <div class="container body-content">
                <div class="col">
                    <div class="row">
                        <h1>Models</h1>
                        <p>
                            Model objects are parts of the application which implement the logic for the application’s data domain.
                            It retrieves and stores model state in a database. For example, product object might retrieve information
                            from a database, operate on it. Then write information back to products table in the SQL server.
                        </p>
                    </div>
                </div>
                <div class="col">
                    <div class="row">
                        <h1>Views</h1>
                        <p>
                            Views are the components which are used to display the application’s user interface (UI) also called viewmodel in MVC.
                            It displays the .Net MVC application’s which is created from the model data.
                            <br />
                            The common example would be an edit view of an Item table. It displays text boxes, pop-ups and checks boxes based on
                            the current state of products & object.
                        </p>
                    </div>
                </div>
                <div class="col">
                    <div class="row">
                        <h1>Controller</h1>
                        <p>
                            Controllers handle user interaction, work with the model, and select a view to render that display Ul.
                            In a .Net MVC app, the view only displays information, the controller manages and responds to user input
                            & interaction using action filters in MVC.
                            <br />
                            For example, the controller manages query-string values and passes those values to the model.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
