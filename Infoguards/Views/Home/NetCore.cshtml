
@{
    ViewBag.Title = "NetCore";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<br />
<br />
<br />
<br />
<br />
<div class="container mt-5">
    <div class="col">
        <div class="row">
            <h1>What is ASP.NET Core?</h1>
            <p>
                ASP.NET Core is a new open-source and cross-platform framework for building modern cloud based internet connected applications,
                such as web apps, IoT apps and mobile backends. ASP.NET Core apps can run on .NET Core or on the full .NET Framework.
                It was architected to provide an optimized development framework for apps that are deployed to the cloud or run on-premises.
                It consists of modular components with minimal overhead, so you retain flexibility while constructing your solutions.
                You can develop and run your ASP.NET Core apps cross-platform on Windows, Mac and Linux. ASP.NET Core is open source at GitHub.
            </p>
        </div>
        <div class="row">
            <h1>Why build ASP.NET Core?</h1>
            <p>
                The first preview release of ASP.NET came out almost 15 years ago as part of the .NET Framework. Since then millions of developers
                have used it to build and run great web apps, and over the years we have added and evolved many capabilities to it.
                <br />
                ASP.NET Core has a number of architectural changes that result in a much leaner and modular framework. ASP.NET Core is no longer
                based on System.Web.dll. It is based on a set of granular and well factored NuGet packages. This allows you to optimize your app
                to include just the NuGet packages you need. The benefits of a smaller app surface area include tighter security, reduced servicing,
                improved performance, and decreased costs in a pay-for-what-you-use model.
                <br />
                With ASP.NET Core you gain the following foundational improvements:
            </p>
            <div>
                <ul>
                    <li>A unified story for building web UI and web APIs</li>
                    <li>Integration of modern client-side frameworks and development workflows</li>
                    <li>A cloud-ready environment-based configuration system</li>
                    <li>Built-in dependency injection</li>
                    <li>New light-weight and modular HTTP request pipeline</li>
                    <li>Ability to host on IIS or self-host in your own process</li>
                    <li>Built on .NET Core, which supports true side-by-side app versioning</li>
                    <li>Ships entirely as NuGet packages</li>
                    <li>New tooling that simplifies modern web development</li>
                    <li>Build and run cross-platform ASP.NET apps on Windows, Mac and Linux</li>
                    <li>Open source and community focused</li>
                </ul>
            </div>
        </div>
        <div class="row">
            <h1>Services</h1>
            <p>
                A service is a component that is intended for common consumption in an application. Services are made available through dependency injection.
                ASP.NET Core includes a simple built-in inversion of control (IoC) container that supports constructor injection by default, but can be
                easily replaced with your IoC container of choice. In addition to its loose coupling benefit, DI makes services available throughout
                your app. For example, Logging is available throughout your app. See Dependency Injection for more details.
            </p>
        </div>
        <div class="row">
            <h1>Middleware</h1>
            <p>
                In ASP.NET Core you compose your request pipeline using Middleware. ASP.NET Core middleware performs asynchronous logic on an HttpContext and then either invokes the next middleware in the sequence or terminates the request directly. You generally “Use” middleware by taking a dependency on a NuGet package and invoking a corresponding UseXYZ extension method on the IApplicationBuilder in the Configure method.
                <br />
                ASP.NET Core comes with a rich set of prebuilt middleware:
                <ul>
                    <li>Static files</li>
                    <li>Routing</li>
                    <li>Authentication</li>
                </ul>
                You can also author your own custom middleware.
                <br />
                You can use any OWIN-based middleware with ASP.NET Core. See Open Web Interface for .NET (OWIN) for details.
            </p>
        </div>
        <div class="row">
            <h1>Servers</h1>
            <p>
                The ASP.NET Core hosting model does not directly listen for requests; rather it relies on an HTTP server implementation to
                forward the request to the application. The forwarded request is wrapped as a set of feature interfaces that the application
                then composes into an HttpContext. ASP.NET Core includes a managed cross-platform web server, called Kestrel, that you would
                typically run behind a production web server like IIS or nginx.
            </p>
        </div>
        <div class="row">
            <h1>Content root</h1>
            <p>
                The content root is the base path to any content used by the app, such as its views and web content. By default the content root
                is the same as application base path for the executable hosting the app; an alternative location can be specified with WebHostBuilder.
            </p>
        </div>
        <div class="row">
            <h1>Web root</h1>
            <p>
                The web root of your app is the directory in your project for public, static resources like css, js, and image files. The static
                files middleware will only serve files from the web root directory (and sub-directories) by default. The web root path defaults
                to , but you can specify a different location using the WebHostBuilder.
            </p>
        </div>
        <div class="row">
            <h1>Configuration</h1>
            <p>
                ASP.NET Core uses a new configuration model for handling simple name-value pairs. The new configuration model is not based on System.
                Configuration or web.config; rather, it pulls from an ordered set of configuration providers. The built-in configuration providers
                support a variety of file formats (XML, JSON, INI) and environment variables to enable environment-based configuration. You can also
                write your own custom configuration providers.

                See Configuration for more information.
            </p>
        </div>
        <div class="row">
            <h1>Envirouments</h1>
            <p>
                Environments, like “Development” and “Production”, are a first-class notion in ASP.NET Core and can be set using environment variables.
                See Working with Multiple Environments for more information.
            </p>
        </div>
    </div>
</div>